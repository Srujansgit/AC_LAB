
import java.util.Scanner;

public class JacobiSymbol {

    public static int jacobi(int a, int p) {
        a %= p;
        int result = 1;

        while (a != 0) {
            while (a % 2 == 0) {
                a /= 2;
                if (p % 8 == 3 || p % 8 == 5) {
                    result = -result;
                }
            }
            int temp = a;
            a = p;
            p = temp;

            if (a % 4 == 3 && p % 4 == 3) {
                result = -result;
            }
            a %= p;
        }

        return (p == 1) ? result : 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a: ");
        int a = scanner.nextInt();
        
        System.out.print("Enter p (odd number): ");
        int p = scanner.nextInt();

        System.out.println("Jacobi Symbol (" + a + "/" + p + ") = " + jacobi(a, p));
        
        scanner.close();
    }
}





import java.math.BigInteger;
import java.util.Scanner;

public class MillerRabin {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number to check: ");
        BigInteger n = sc.nextBigInteger();

        // Using BigInteger's built-in isProbablePrime() method
        System.out.println(n + (n.isProbablePrime(20) ? " is probably prime." : " is composite."));
        sc.close();
    }
}






import java.math.BigInteger;
import java.util.Scanner;

public class SimpleRabinCrypto {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input values
        System.out.print("Enter plain text (as number): ");
        BigInteger m = sc.nextBigInteger();
        System.out.print("Enter prime number p: ");
        BigInteger p = sc.nextBigInteger();
        System.out.print("Enter prime number q: ");
        BigInteger q = sc.nextBigInteger();

        BigInteger n = p.multiply(q);
        BigInteger c = m.multiply(m).mod(n);
        System.out.println("Cipher Text: " + c);

        // Calculate square roots modulo p and q
        BigInteger mp = c.modPow(p.add(BigInteger.ONE).divide(BigInteger.valueOf(4)), p);
        BigInteger mq = c.modPow(q.add(BigInteger.ONE).divide(BigInteger.valueOf(4)), q);

        // Calculate using Chinese Remainder Theorem
        BigInteger yp = p.modInverse(q);
        BigInteger yq = q.modInverse(p);

        BigInteger r1 = (yp.multiply(p).multiply(mq).add(yq.multiply(q).multiply(mp))).mod(n);
        BigInteger r2 = n.subtract(r1);
        BigInteger s1 = (yp.multiply(p).multiply(mq.negate()).add(yq.multiply(q).multiply(mp))).mod(n);
        BigInteger s2 = n.subtract(s1);

        System.out.println("Possible Plain Texts: " + r1.mod(n) + ", " + r2.mod(n) + ", " + s1.mod(n) + ", " + s2.mod(n));
        sc.close();
    }
}






 import java.math.BigInteger;
import java.util.Scanner;

public class ElGamalCrypto {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input values
        System.out.println("Enter prime (p), private key (d), random (r), and message (m < p): ");
        BigInteger p = sc.nextBigInteger();
        BigInteger d = sc.nextBigInteger();
        BigInteger r = sc.nextBigInteger();
        BigInteger m = sc.nextBigInteger();

        BigInteger g = BigInteger.valueOf(2); // Generator
        BigInteger e1 = g;
        BigInteger e2 = g.modPow(d, p); // Public key

        // Encryption
        BigInteger c1 = e1.modPow(r, p);
        BigInteger c2 = m.multiply(e2.modPow(r, p)).mod(p);
        System.out.println("Cipher Text: (" + c1 + ", " + c2 + ")");

        // Decryption
        BigInteger k = c1.modPow(d, p);
        BigInteger kInv = k.modInverse(p); // Using BigInteger's inbuilt inverse
        BigInteger decryptedMessage = c2.multiply(kInv).mod(p);
        System.out.println("Decrypted Message: " + decryptedMessage);

        sc.close();
    }
}






import java.math.BigInteger;
import java.util.Scanner;

public class DiffieHellman {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Inputs: Prime number (p) and generator (g)
        System.out.print("Enter prime number (p): ");
        BigInteger p = sc.nextBigInteger();
        System.out.print("Enter generator (g): ");
        BigInteger g = sc.nextBigInteger();

        // Private keys chosen by Alice and Bob
        System.out.print("Enter Alice's private key (a): ");
        BigInteger a = sc.nextBigInteger();
        System.out.print("Enter Bob's private key (b): ");
        BigInteger b = sc.nextBigInteger();

        // Calculate public keys
        BigInteger A = g.modPow(a, p);
        BigInteger B = g.modPow(b, p);
        System.out.println("Alice's Public Key: " + A);
        System.out.println("Bob's Public Key: " + B);

        // Calculate shared secret keys
        BigInteger aliceSecret = B.modPow(a, p);
        BigInteger bobSecret = A.modPow(b, p);

        System.out.println("Alice's Shared Secret: " + aliceSecret);
        System.out.println("Bob's Shared Secret: " + bobSecret);

        sc.close();
    }
}





import java.util.Scanner;
import java.math.BigInteger;

public class PointAddition {

    public static int modInverse(int a, int p) {
        return BigInteger.valueOf(a).modInverse(BigInteger.valueOf(p)).intValue();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input elliptic curve parameters and points
        System.out.print("Enter prime number (p): ");
        int p = sc.nextInt();
        System.out.print("Enter x1: ");
        int x1 = sc.nextInt();
        System.out.print("Enter y1: ");
        int y1 = sc.nextInt();
        System.out.print("Enter x2: ");
        int x2 = sc.nextInt();
        System.out.print("Enter y2: ");
        int y2 = sc.nextInt();

        // Check if points are distinct
        if (x1 == x2) {
            System.out.println("Points are not suitable for addition (x1 cannot be equal to x2 in point addition).");
        } else {
            // Point Addition: λ = (y2 - y1) / (x2 - x1) mod p
            int numerator = (y2 - y1 + p) % p;
            int denominator = modInverse((x2 - x1 + p) % p, p);
            int lambda = (numerator * denominator) % p;

            // Calculate resulting point (x3, y3)
            int x3 = (lambda * lambda - x1 - x2 + p) % p;
            int y3 = (lambda * (x1 - x3) - y1 + p) % p;

            System.out.println("Resulting Point (x3, y3): (" + x3 + ", " + y3 + ")");
        }
        
        sc.close();
    }
}









import java.util.Scanner;
import java.math.BigInteger;

public class PointDoubling {

    public static int modInverse(int a, int p) {
        return BigInteger.valueOf(a).modInverse(BigInteger.valueOf(p)).intValue();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input elliptic curve parameters and point
        System.out.print("Enter prime number (p): ");
        int p = sc.nextInt();
        System.out.print("Enter coefficient a of curve (y^2 = x^3 + ax + b): ");
        int a = sc.nextInt();
        System.out.print("Enter x1: ");
        int x1 = sc.nextInt();
        System.out.print("Enter y1: ");
        int y1 = sc.nextInt();

        // Check if y1 = 0 (Point at infinity)
        if (y1 == 0) {
            System.out.println("Point Doubling Result: Point at Infinity");
            return;
        }

        // Calculate λ using the Point Doubling formula
        int numerator = (3 * x1 * x1 + a) % p;
        int denominator = modInverse(2 * y1, p);
        int lambda = (numerator * denominator) % p;

        // Calculate resulting point (x3, y3)
        int x3 = (lambda * lambda - 2 * x1 + p) % p;
        int y3 = (lambda * (x1 - x3) - y1 + p) % p;

        System.out.println("Resulting Point (x3, y3): (" + x3 + ", " + y3 + ")");
        sc.close();
    }
}






import java.util.Scanner;
import java.math.BigInteger;

public class UserInputECC {

    static int a, p;
    static int[] G = new int[2];

    public static int[] addPoints(int[] P, int[] Q) {
        if (P[0] == Q[0] && P[1] == Q[1]) {
            int lambda = ((3 * P[0] * P[0] + a) * modInverse(2 * P[1], p)) % p;
            if (lambda < 0) lambda += p;
            
            int x3 = (lambda * lambda - P[0] - Q[0]) % p;
            int y3 = (lambda * (P[0] - x3) - P[1]) % p;
            return new int[]{(x3 + p) % p, (y3 + p) % p};
        } else {
            int lambda = ((Q[1] - P[1]) * modInverse(Q[0] - P[0], p)) % p;
            if (lambda < 0) lambda += p;
            
            int x3 = (lambda * lambda - P[0] - Q[0]) % p;
            int y3 = (lambda * (P[0] - x3) - P[1]) % p;
            return new int[]{(x3 + p) % p, (y3 + p) % p};
        }
    }

    public static int[] scalarMultiply(int[] P, int k) {
        int[] result = P;
        for (int i = 1; i < k; i++) {
            result = addPoints(result, P);
        }
        return result;
    }

    public static int modInverse(int a, int p) {
        return BigInteger.valueOf(a).modInverse(BigInteger.valueOf(p)).intValue();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Curve Parameters
        System.out.print("Enter coefficient a: ");
        a = scanner.nextInt();
        
        System.out.print("Enter prime number p: ");
        p = scanner.nextInt();

        System.out.print("Enter base point G (x, y): ");
        G[0] = scanner.nextInt();
        G[1] = scanner.nextInt();

        // Private and Public Key Generation
        System.out.print("Enter private key (kA): ");
        int kA = scanner.nextInt();
        int[] publicKey = scalarMultiply(G, kA);
        System.out.println("Public Key: (" + publicKey[0] + ", " + publicKey[1] + ")");

        // Encryption
        System.out.print("Enter plain text point (x, y): ");
        int[] plainText = new int[2];
        plainText[0] = scanner.nextInt();
        plainText[1] = scanner.nextInt();

        System.out.print("Enter random number (kB): ");
        int kB = scanner.nextInt();
        int[] kB_G = scalarMultiply(G, kB);
        int[] kB_publicKey = scalarMultiply(publicKey, kB);

        int cipher1 = kB_G[0];
        int cipher2X = (plainText[0] + kB_publicKey[0]) % p;
        int cipher2Y = (plainText[1] + kB_publicKey[1]) % p;

        System.out.println("Encrypted: ((" + cipher1 + ", " + kB_G[1] + "), (" + cipher2X + ", " + cipher2Y + "))");

        // Decryption
        int[] kA_kB_G = scalarMultiply(kB_G, kA);
        int decryptedX = (cipher2X - kA_kB_G[0] + p) % p;
        int decryptedY = (cipher2Y - kA_kB_G[1] + p) % p;

        System.out.println("Decrypted: (" + decryptedX + ", " + decryptedY + ")");
        scanner.close();
    }
}







import java.math.BigInteger;
import java.util.Scanner;

public class EasyRSA {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        BigInteger p = sc.nextBigInteger();  // small prime
        BigInteger q = sc.nextBigInteger();  // small prime
        BigInteger e = sc.nextBigInteger();  // public key
        BigInteger message = sc.nextBigInteger(); // message

        BigInteger n = p.multiply(q);
        BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));
        BigInteger d = e.modInverse(phi);  // private key

        System.out.println("Public Key: (" + e + ", " + n + ")");
        System.out.println("Private Key: (" + d + ", " + n + ")");

        BigInteger encrypted = message.modPow(e, n);
        System.out.println("Encrypted: " + encrypted);

        BigInteger decrypted = encrypted.modPow(d, n);
        System.out.println("Decrypted: " + decrypted);

        sc.close();
    }
}



import java.util.Scanner;

public class BasicAlgorithmsMenu {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Division Algorithm");
            System.out.println("2. GCD using Euclid's Algorithm");
            System.out.println("3. Caesar Cipher Encryption");
            System.out.println("4. Simple DES Operation");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter dividend: ");
                    int dividend = scanner.nextInt();
                    System.out.print("Enter divisor: ");
                    int divisor = scanner.nextInt();
                    System.out.println("Quotient: " + (dividend / divisor));
                    System.out.println("Remainder: " + (dividend % divisor));
                    break;

                case 2:
                    System.out.print("Enter first number: ");
                    int a = scanner.nextInt();
                    System.out.print("Enter second number: ");
                    int b = scanner.nextInt();
                    System.out.println("GCD: " + gcd(a, b));
                    break;

                case 3:
                    scanner.nextLine();
                    System.out.print("Enter text to encrypt: ");
                    String text = scanner.nextLine();
                    System.out.print("Enter shift value: ");
                    int shift = scanner.nextInt();
                    System.out.println("Encrypted Text: " + caesarCipher(text, shift));
                    break;

                case 4:
                    System.out.print("Enter 4-bit input (e.g., 1101): ");
                    String input = scanner.next();
                    System.out.print("Enter 4-bit key (e.g., 1010): ");
                    String key = scanner.next();
                    System.out.println("DES Result: " + simpleDes(input, key));
                    break;

                case 5:
                    System.out.println("Exiting the program.");
                    break;

                default:
                    System.out.println("Invalid choice. Please enter a number between 1 and 5.");
            }
        } while (choice != 5);
    }

    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    public static String caesarCipher(String text, int shift) {
        StringBuilder result = new StringBuilder();
        shift = shift % 26;
        for (char c : text.toCharArray()) {
            if (Character.isLetter(c)) {
                char base = Character.isLowerCase(c) ? 'a' : 'A';
                result.append((char) ((c - base + shift) % 26 + base));
            } else {
                result.append(c);
            }
        }
        return result.toString();
    }

    public static String simpleDes(String input, String key) {
        if (input.length() != 4 || key.length() != 4) {
            return "Invalid input length. Enter 4 bits each.";
        }

        int[] data = new int[4];
        int[] roundKey = new int[4];
        int[] result = new int[4];

        for (int i = 0; i < 4; i++) {
            data[i] = Character.getNumericValue(input.charAt(i));
            roundKey[i] = Character.getNumericValue(key.charAt(i));
        }

        // Simple XOR Operation
        for (int i = 0; i < 4; i++) {
            result[i] = data[i] ^ roundKey[i];
        }

        // Convert result to string
        StringBuilder output = new StringBuilder();
        for (int bit : result) {
            output.append(bit);
        }

        return output.toString();
    }
}




import java.math.BigInteger;
import java.util.Scanner;

public class ElGamalSignature {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Enter prime p, primitive root g, private key x, random r, and hash h:");

        BigInteger p = sc.nextBigInteger();  // prime
        BigInteger g = sc.nextBigInteger();  // primitive root
        BigInteger x = sc.nextBigInteger();  // private key
        BigInteger r = sc.nextBigInteger();  // random number (gcd(r, p-1) = 1)
        BigInteger h = sc.nextBigInteger();  // hash of the message

        BigInteger y = g.modPow(x, p);       // public key
        BigInteger s1 = g.modPow(r, p);      // signature part 1
        BigInteger rInv = r.modInverse(p.subtract(BigInteger.ONE));
        BigInteger s2 = h.subtract(x.multiply(s1)).multiply(rInv).mod(p.subtract(BigInteger.ONE));

        System.out.println("Signature: s1 = " + s1 + ", s2 = " + s2);

        BigInteger v1 = y.modPow(s1, p).multiply(s1.modPow(s2, p)).mod(p);
        BigInteger v2 = g.modPow(h, p);

        System.out.println(v1.equals(v2) ? "VALID" : "INVALID");

        sc.close();
    }
}





import java.math.BigInteger;
import java.util.Scanner;

public class RSASignature {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Enter prime q and q, encryption key e and hash h:");
        BigInteger p = sc.nextBigInteger();  // first prime
        BigInteger q = sc.nextBigInteger();  // second prime
        BigInteger e = sc.nextBigInteger();  // public exponent
        BigInteger h = sc.nextBigInteger();  // hash of the message

        BigInteger n = p.multiply(q);                      // n = p * q
        BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));
        BigInteger d = e.modInverse(phi);                  // private key

        BigInteger s = h.modPow(d, n);                     // signature: s = h^d mod n
        System.out.println("Signature: " + s);

        BigInteger v = s.modPow(e, n);                     // verification: v = s^e mod n
        System.out.println(v.equals(h) ? "VALID" : "INVALID");

        sc.close();
    }
}



import java.math.BigInteger;
import java.util.Scanner;

public class EasyECC {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input
        System.out.println("Enter prime p, base G, private key d, random k, and hash h:");
        BigInteger p = sc.nextBigInteger();
        BigInteger G = sc.nextBigInteger();
        BigInteger d = sc.nextBigInteger();
        BigInteger k = sc.nextBigInteger();
        BigInteger h = sc.nextBigInteger();

        // Public key
        BigInteger Q = G.multiply(d).mod(p);

        // Signature
        BigInteger r = G.multiply(k).mod(p);
        BigInteger kinv = k.modInverse(p);
        BigInteger s = (h.add(d.multiply(r))).multiply(kinv).mod(p);

        System.out.println("Signature: r = " + r + ", s = " + s);

        // Verification
        BigInteger w = s.modInverse(p);
        BigInteger u1 = h.multiply(w).mod(p);
        BigInteger u2 = r.multiply(w).mod(p);
        BigInteger v = (G.multiply(u1).add(Q.multiply(u2))).mod(p);

        System.out.println(v.equals(r) ? "VALID" : "INVALID");
    }
}

